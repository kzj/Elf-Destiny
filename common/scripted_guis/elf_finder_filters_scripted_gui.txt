toggle_all_elf_filters_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		# reset_all_elf_filters = yes
		toggle_all_filters = yes

        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

clear_all_elf_filters_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		clear_all_filters = yes

        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

toggle_all_mortal_tier_elf_filters_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		toggle_all_mortal_elf_tier_filter = yes

        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

toggle_all_fae_tier_elf_filters_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		toggle_all_fae_elf_tier_filter = yes

        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

toggle_all_celestial_tier_elf_filters_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		toggle_all_celestial_elf_tier_filter = yes

        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

toggle_all_ainur_tier_elf_filters_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		toggle_all_ainur_elf_tier_filter = yes

        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

toggle_all_elf_bloodline_filters_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		toggle_all_elf_bloodlines_filter = yes

        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

toggle_all_elf_dyansty_filters_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		toggle_all_elf_dynasties_filter = yes

        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

toggle_all_elf_magic_ability_filters_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		toggle_all_elf_magic_ability_filter = yes

        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

toggle_all_elf_aeluran_order_filters_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		toggle_all_elf_aeluran_order_filter = yes

        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_male_filter_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		set_male_only_filter = yes
        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_female_filter_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		set_female_only_filter = yes
        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_diplo_range_filter_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		toggle_diplo_range_filter = yes
        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_is_courtier_filter_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		toggle_is_courtier_filter = yes
        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_is_ruler_filter_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		toggle_is_ruler_filter = yes
        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_artifacts_filter_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		toggle_elf_artifacts_filter = yes
        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_can_marry_filter_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		toggle_can_marry_filter = yes
        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_lovers_filter_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		toggle_is_lover_filter = yes
        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_friends_filter_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		toggle_is_friend_filter = yes
        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_enemies_filter_button = {
	# scope = none   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		toggle_is_enemy_filter = yes
        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_type_filter_button = {
	# scope = character   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		elf_type
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		if = {
			limit = { scope:elf_type = 1 }
			debug_log = "SCRIPTED GUI elf_blood"

			toggle_elf_type_filter = { ELF_TYPE = elf_blood }
		}
		else_if = {
			limit = { scope:elf_type = 2 }
			debug_log = "SCRIPTED GUI elf"

			toggle_elf_type_filter = { ELF_TYPE = elf }
		}
		else_if = {
			limit = { scope:elf_type = 3 }
			debug_log = "SCRIPTED GUI high_elf"

			toggle_elf_type_filter = { ELF_TYPE = high_elf }
		}
		else_if = {
			limit = { scope:elf_type = 4 }
			debug_log = "SCRIPTED GUI true_elf"

			toggle_elf_type_filter = { ELF_TYPE = true_elf }
		}
		else_if = {
			limit = { scope:elf_type = 5 }
			debug_log = "SCRIPTED GUI fae"

			toggle_elf_type_filter = { ELF_TYPE = fae }
		}
		else_if = {
			limit = { scope:elf_type = 6 }
			debug_log = "SCRIPTED GUI fae_radiant"

			toggle_elf_type_filter = { ELF_TYPE = fae_radiant }
		}
		else_if = {
			limit = { scope:elf_type = 7 }
			debug_log = "SCRIPTED GUI celestial"

			toggle_elf_type_filter = { ELF_TYPE = celestial }
		}
		else_if = {
			limit = { scope:elf_type = 8 }
			debug_log = "SCRIPTED GUI seraphic_celestial"

			toggle_elf_type_filter = { ELF_TYPE = seraphic_celestial }
		}
		else_if = {
			limit = { scope:elf_type = 9 }
			debug_log = "SCRIPTED GUI eldar"

			toggle_elf_type_filter = { ELF_TYPE = eldar }
		}
		else_if = {
			limit = { scope:elf_type = 10 }
			debug_log = "SCRIPTED GUI maiar"

			toggle_elf_type_filter = { ELF_TYPE = maiar }
		}
		else_if = {
			limit = { scope:elf_type = 11 }
			debug_log = "SCRIPTED GUI valar"

			toggle_elf_type_filter = { ELF_TYPE = valar }
		}
		else_if = {
			limit = { scope:elf_type = 12 }
			debug_log = "SCRIPTED GUI aratar"

			toggle_elf_type_filter = { ELF_TYPE = aratar }
		}
		else_if = {
			limit = { scope:elf_type = 13 }
			debug_log = "SCRIPTED GUI otherworlder"

			toggle_elf_type_filter = { ELF_TYPE = otherworlder }
		}


        elf_finder_create_elf_list = yes

	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_dynasty_filter_button = {
	# scope = character   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		elf_dynasty
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		if = {
			limit = { scope:elf_dynasty = 1 }
			debug_log = "SCRIPTED GUI daelurin"

			toggle_elf_dynasty_filter = { ELF_DYNASTY = daelurin }
		}
		else_if = {
			limit = { scope:elf_dynasty = 2 }
			debug_log = "SCRIPTED GUI thundarael"

			toggle_elf_dynasty_filter = { ELF_DYNASTY = thundarael }
		}
		else_if = {
			limit = { scope:elf_dynasty = 3 }
			debug_log = "SCRIPTED GUI gwynthorn"

			toggle_elf_dynasty_filter = { ELF_DYNASTY = gwynthorn }
		}
		else_if = {
			limit = { scope:elf_dynasty = 4 }
			debug_log = "SCRIPTED GUI valerith"

			toggle_elf_dynasty_filter = { ELF_DYNASTY = valerith }
		}
		else_if = {
			limit = { scope:elf_dynasty = 5 }
			debug_log = "SCRIPTED GUI serelion"

			toggle_elf_dynasty_filter = { ELF_DYNASTY = serelion }
		}
		else_if = {
			limit = { scope:elf_dynasty = 6 }
			debug_log = "SCRIPTED GUI other elves"

			toggle_elf_dynasty_filter = { ELF_DYNASTY = other }
		}

        elf_finder_create_elf_list = yes

	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_player_dynasty_filter_button = {
	# scope = character   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
	ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "elf_player_dynasty_filter_button"
		toggle_elf_player_dynasty_filter = yes
        elf_finder_create_elf_list = yes

	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_player_house_filter_button = {
	# scope = character   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		ignored_scope
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "elf_player_house_filter_button"

		toggle_elf_player_house_filter = yes
        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}


elf_bloodline_filter_button = {
	# scope = character   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		elf_bloodline
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		if = {
			limit = { scope:elf_bloodline = 1 }
			debug_log = "SCRIPTED GUI daelurin"

			toggle_elf_bloodline_filter = { ELF_BLOODLINE = daelurin }
		}
		else_if = {
			limit = { scope:elf_bloodline = 2 }
			debug_log = "SCRIPTED GUI thundarael"

			toggle_elf_bloodline_filter = { ELF_BLOODLINE = thundarael }
		}
		else_if = {
			limit = { scope:elf_bloodline = 3 }
			debug_log = "SCRIPTED GUI gwynthorn"

			toggle_elf_bloodline_filter = { ELF_BLOODLINE = gwynthorn }
		}
		else_if = {
			limit = { scope:elf_bloodline = 4 }
			debug_log = "SCRIPTED GUI valerith"

			toggle_elf_bloodline_filter = { ELF_BLOODLINE = valerith }
		}
		else_if = {
			limit = { scope:elf_bloodline = 5 }
			debug_log = "SCRIPTED GUI serelion"

			toggle_elf_bloodline_filter = { ELF_BLOODLINE = serelion }
		}
		else_if = {
			limit = { scope:elf_bloodline = 6 }
			debug_log = "SCRIPTED GUI no bloodline"

			toggle_elf_bloodline_filter = { ELF_BLOODLINE = no_bloodline }
		}

        elf_finder_create_elf_list = yes

	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_magic_ability_filter_button = {
	# scope = character   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		magic_talent
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		if = {
			limit = { scope:magic_talent = 1 }
			debug_log = "SCRIPTED GUI magic_talent_1"

			toggle_elf_magic_ability_filter = { ELF_MAGIC_ABILITY = magic_talent_1 }
		}
		else_if = {
			limit = { scope:magic_talent = 2 }
			debug_log = "SCRIPTED GUI magic_talent_2"

			toggle_elf_magic_ability_filter = { ELF_MAGIC_ABILITY = magic_talent_2 }
		}
		else_if = {
			limit = { scope:magic_talent = 3 }
			debug_log = "SCRIPTED GUI magic_talent_3"

			toggle_elf_magic_ability_filter = { ELF_MAGIC_ABILITY = magic_talent_3 }
		}
		else_if = {
			limit = { scope:magic_talent = 4 }
			debug_log = "SCRIPTED GUI magic_talentless"

			toggle_elf_magic_ability_filter = { ELF_MAGIC_ABILITY = magic_talentless }
		}

        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}

elf_aeluran_order_filter_button = {
	# scope = character   # the root scope, i.e. the target of the effects
	saved_scopes = { # any additional targets
		aeluran_rank
	} 		

	# confirm_title = "your_title"	# adding this will prompt the player to confirm the action
	# confirm_text = "your_text"	# additional text in the confirmation popup

	effect = {			# what it does
		debug_log = "SCRIPTED GUI"

		if = {
			limit = { scope:aeluran_rank = 1 }
			debug_log = "SCRIPTED GUI aeluran_servant"

			toggle_elf_aeluran_order_filter = { AELURAN_ORDER_RANK = aeluran_servant }
		}
		else_if = {
			limit = { scope:aeluran_rank = 2 }
			debug_log = "SCRIPTED GUI aeluran_sister"

			toggle_elf_aeluran_order_filter = { AELURAN_ORDER_RANK = aeluran_sister }
		}
		else_if = {
			limit = { scope:aeluran_rank = 3 }
			debug_log = "SCRIPTED GUI aeluran_matron"

			toggle_elf_aeluran_order_filter = { AELURAN_ORDER_RANK = aeluran_matron }
		}
		else_if = {
			limit = { scope:aeluran_rank = 4 }
			debug_log = "SCRIPTED GUI aeluran_high_matriarch"

			toggle_elf_aeluran_order_filter = { AELURAN_ORDER_RANK = aeluran_high_matriarch }
		}
		else_if = {
			limit = { scope:aeluran_rank = 5 }
			debug_log = "SCRIPTED GUI born_in_the_red"

			toggle_elf_aeluran_order_filter = { AELURAN_ORDER_RANK = born_in_the_red }
		}
		else_if = {
			limit = { scope:aeluran_rank = 6 }
			debug_log = "SCRIPTED GUI non_aeluran_elf"

			toggle_elf_aeluran_order_filter = { AELURAN_ORDER_RANK = non_aeluran_elf }
		}

        elf_finder_create_elf_list = yes
	}

	is_shown = {} 			# is it visible in the UI?

	is_valid = {} 			# can the player use it? always checked, even if you don't use enabled property on the button

	ai_is_valid = {} 		# is the AI allowed to use it? Disabled by default.
}